module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);
    
    wire ss_max, mm_max, hh_max;
        
    // PM logic for a 12-hour clock
    always @(posedge clk) begin
        if (reset) begin
            pm <= 1'b0;
        end
        else if (hh == 8'h11 & mm_max & ss_max) begin
            pm <= ~pm;
        end
    end
    

    //Seconds logic
    assign ss_max = (ss == 8'h59);						
    always @(posedge clk) begin
        if(reset)
           	ss <= 8'h00;        						//If reset triggered -> ss returns to 00
        else if (ena) begin
            if(ss_max)
                ss <= 8'h00;							//When enabled & ss = 59 -> ss returns to 00
            else if (ss[3:0] == 4'h9) begin
                ss[7:4] <= ss[7:4] + 1;
                ss[3:0] <= 4'h0;						//When enabled & ss != 59 & ss[3:0] = 9 -> ss[3:0] returns 0, ss[7:4] increments
            end
            else
                ss[3:0] <= ss[3:0] + 1;					//When enabled & ss != 59 & ss[3:0] != 9 -> ss[3:0]++ 
        end
    end
    
    //Minutes logic
    assign mm_max = (mm == 8'h59);						
    always @(posedge clk) begin
        if(reset)
           	mm <= 8'h00;        						//If reset triggered -> mm returns to 00
        else if (ss_max) begin
            if(mm_max)
                mm <= 8'h00;							//When ss_max & mm = 59 -> mm returns to 00
            else if (mm[3:0] == 4'h9) begin
                mm[7:4] <= mm[7:4] + 1;
                mm[3:0] <= 4'h0;						//When ss_max & mm != 59 & mm[3:0] = 9 -> mm[3:0] returns 0, mm[7:4] increments
            end
            else
                mm[3:0] <= mm[3:0] + 1;					//When ss_max & mm != 59 & mm[3:0] != 9 -> mm[3:0]++ 
        end
    end
    
    //Hours logic
    assign hh_max = (hh == 8'h12);						
    always @(posedge clk) begin
        if(reset)
           	hh <= 8'h12;        						//If reset triggered -> hh returns to 12
        else if (mm_max & ss_max) begin
            if(hh_max)
                hh <= 8'h01;							//When mm_max & ss_max & hh = 12 -> hh returns to 01
            else if (hh[3:0] == 4'h9) begin
                hh[7:4] <= hh[7:4] + 1;
                hh[3:0] <= 4'h0;						//When mm_max & ss_max & hh != 12 & hh[3:0] = 9 -> hh[3:0] returns 0, hh[7:4] increments
            end
            else
                hh[3:0] <= hh[3:0] + 1;					//When mm_max & ss_max & hh != 59 & hh[3:0] != 9 -> hh[3:0]++ 
        end
    end


endmodule

